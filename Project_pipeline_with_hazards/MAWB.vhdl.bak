library std;
use std.standard.all;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;	 
use ieee.std_logic_unsigned.all;

-- since The Memory is asynchronous read, there is no read signal, but you can use it based on your preference.
-- this memory gives 16 Bit data in one clock cycle, so edit the file to your requirement.
--p IFID_Mem_d_out(7 downto 0),se10_ir5_0, se7_ir8_0, ls7_ir8_0, IFID_PC_out);
 
entity EXMA is 
	port (clk, EXMA_en: in std_logic;
      	RREX_r7_out, RREX_ls7_ir8_0, T1, RREX_rf_d1, RREX_rf_d2, alu_result_dummy, alu3_out: in std_logic_vector(15 downto 0);
			EXMA_r7_out, EXMA_ls7_ir8_0, EXMA_T1, EXMA_rf_d1, EXMA_rf_d2, EXMA_alu2_out, EXMA_alu3_out: out std_logic_vector(15 downto 0)); 
end entity;

architecture Form of EXMA is 
begin
process (EXMA_en, clk)
 begin
 if(rising_edge(clk)) then
 if(RREX_en = '1') then
 EXMA_r7_out<=RREX_r7_out;
 EXMA_ls7_ir8_0<=RREX_ls7_ir8_0;
 EXMA_T1<=T1;
 EXMA_rf_d1<=RREX_rf_d1;
 EXMA_rf_d2<=RREX_rf_d2;
 EXMA_alu2_out<=alu_result_dummy;
 EXMA_alu3_out<=alu3_out;
 end if;
 end if;
 end process;
end Form;
