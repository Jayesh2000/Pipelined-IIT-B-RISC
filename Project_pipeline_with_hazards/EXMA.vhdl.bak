library std;
use std.standard.all;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;	 
use ieee.std_logic_unsigned.all;

-- since The Memory is asynchronous read, there is no read signal, but you can use it based on your preference.
-- this memory gives 16 Bit data in one clock cycle, so edit the file to your requirement.
--p IFID_Mem_d_out(7 downto 0),se10_ir5_0, se7_ir8_0, ls7_ir8_0, IFID_PC_out);
 
entity RREX is 
	port (clk, RREX_en: in std_logic;
	      rf_d1, rf_d2: in std_logic_vector(15 downto 0);
		  	IDRR7_0: in std_logic_vector(7 downto 0);
		  	IDRRse10_ir5_0, IDRR_se7_ir8_0, IDRR_ls7_ir8_0, IDRR_PC_out: in std_logic_vector(15 downto 0);
			RREX_rf_d1, RREX_rf_d2,  RREX_se10_ir5_0, RREX_se7_ir8_0, RREX_ls7_ir8_0, RREX_PC_out: out std_logic_vector(15 downto 0);
			RREX7_0: out std_logic_vector(7 downto 0));
end entity;

architecture Form of RREX is 
begin
process (RREX_en, clk)
 begin
 if(rising_edge(clk)) then
 if(RREX_en = '1') then
 RREX_rf_d1<=rf_d1;
 RREX_rf_d2<=rf_d2;
 RREX7_0<=IDRR7_0;
 RREX_se10_ir5_0<=IDRRse10_ir5_0; 
 RREX_se7_ir8_0<=IDRR_se7_ir8_0;
 RREX_ls7_ir8_0<=IDRR_ls7_ir8_0;
 RREX_PC_out<=IDRR_PC_out; 
 end if;
 end if;
 end process;
end Form;
